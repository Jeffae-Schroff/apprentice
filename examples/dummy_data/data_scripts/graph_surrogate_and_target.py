import argparse
import importlib
import os
import shutil

from matplotlib import widgets
import apprentice as app

import matplotlib.pyplot as plt
import numpy as np

parser = argparse.ArgumentParser()

#Ex: python3 ../../../../data_scripts/graph_surrogate_and_target.py myweights.txt ../../data.json val_30.json err_20.json 2_gauss_v2

# mandatory arguments
# These have to come from bash, if not appset whines about utf-8 encoding. Go figure
parser.add_argument("weightFile", help="weights file generated by by app-ls")
parser.add_argument("dataFile", help="data file generated by app-datadirtojson")
parser.add_argument("valFile", help="val fit file generated by app-build")
parser.add_argument("errorFile", help="error fit file generated by app-build")
parser.add_argument("experimentName", help="Ex: 2_exp or 2_gauss, determines which target params to give to surrogate", type=str)
args = parser.parse_args()
vals = importlib.import_module('set_values_' + args.experimentName)

if(os.path.isdir('surrogate_target_graphs')):
    shutil.rmtree('surrogate_target_graphs') 
os.mkdir('surrogate_target_graphs/')

GOF = app.appset.TuningObjective3(args.weightFile, args.dataFile, args.valFile)
# using defaults from app-tune2
res = GOF.minimize(1, 1, method="tnc", tol=1e-6, saddlePointCheck=True)
print(GOF.printParams(res.x))
surrogate_values = GOF._AS.vals(res.x)
place = 0
for i in range(vals.nparams):
    bin_width = (vals.x_max[i]-vals.x_min[i])/vals.nbins[i]
    fake_points = np.linspace(vals.x_min[i]+bin_width/2, vals.x_max[i]-bin_width/2, vals.nbins[i])
    weights = surrogate_values[place:place+vals.nbins[i]]
    print(fake_points)
    print(weights)
    print(sum(weights))
    place += vals.nbins[i]
    plt.hist(fake_points, bins=vals.nbins[i], range=[vals.x_min[i], vals.x_max[i]], histtype='step',
    weights=weights, label='surrogate')

    plt.title(args.experimentName + ': observable ' + str(i+1))
    plt.xlabel("x")
    plt.ylabel("Number of Events")
    plt.legend()
    plt.savefig("surrogate_target_graphs/"+args.experimentName+'_'+vals.pnames[i] + ".pdf", format="pdf")
    plt.close() 
