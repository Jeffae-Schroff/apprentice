import argparse
import importlib
import os
import shutil

from scipy.integrate import quad
from matplotlib import widgets
import apprentice as app

import matplotlib.pyplot as plt
import numpy as np

parser = argparse.ArgumentParser()

#Ex: python3 ../../../../data_scripts/graph_surrogate_and_target.py myweights.txt ../../data.json val_30.json err_20.json ../../results 2_gauss_v2

# mandatory arguments
# These have to come from bash, if not appset whines about utf-8 encoding. Go figure
parser.add_argument("weightFile", help="weights file generated by by app-ls")
parser.add_argument("dataFile", help="data file generated by app-datadirtojson")
parser.add_argument("valFile", help="val fit file generated by app-build")
parser.add_argument("errorFile", help="error fit file generated by app-build")
parser.add_argument("outputFolder", help="output folder")
parser.add_argument("experimentName", help="Ex: 2_exp or 2_gauss, determines which target params to give to surrogate", type=str)
args = parser.parse_args()
vals = importlib.import_module('set_values_' + args.experimentName)


GOF = app.appset.TuningObjective3(args.weightFile, args.dataFile, args.valFile)
# using defaults from app-tune2
res = GOF.minimize(1, 1, method="tnc", tol=1e-6, saddlePointCheck=True)
print(GOF.printParams(res.x))
surrogate_values = GOF._AS.vals(res.x)
place = 0
for i in range(vals.nparams):
    bin_width = (vals.x_max[i]-vals.x_min[i])/vals.nbins[i]
    fake_points = np.linspace(vals.x_min[i]+bin_width/2, vals.x_max[i]-bin_width/2, vals.nbins[i])
    raw_weights = surrogate_values[place:place+vals.nbins[i]]

    #apparently weights can output Nones
    weights = np.empty(20)
    for j in range(vals.nbins[i]):
        if j >= len(raw_weights) or raw_weights[j] is None:
            weights[j] = 0
        else:
            weights[j] = raw_weights[j]

    # print(str(fake_points) + " len: " + str(len(fake_points)))
    # print(str(raw_weights))
    # print(str(weights) + " len: " + str(len(weights)))
    place += vals.nbins[i]
    plt.hist(fake_points, bins=vals.nbins[i], range=[vals.x_min[i], vals.x_max[i]], histtype='step',
    weights=weights, label='surrogate')

    def target_func(x):
        return vals.funcs[i](x, vals.targets)
    scale_factor = vals.num_events(vals.targets)/(bin_width * quad(target_func, vals.x_min[i], vals.x_max[i])[0])
    target_weights = [scale_factor * quad(target_func, x-bin_width/2, x+bin_width/2)[0] for x in fake_points]
    plt.hist(fake_points, bins=vals.nbins[i], range=[vals.x_min[i], vals.x_max[i]], histtype='step',
    weights=target_weights, label='target')

    plt.title(args.experimentName + ': observable ' + str(i+1) + ' number of target events: ' + str(vals.num_events(vals.targets)))
    plt.xlabel("x")
    plt.ylabel("Number of Events")
    plt.legend()
    plt.savefig(args.outputFolder+"/"+args.experimentName+'_'+vals.pnames[i] + ".pdf", format="pdf")
    plt.close() 


