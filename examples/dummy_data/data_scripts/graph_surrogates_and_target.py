import argparse
import importlib
import os
import shutil

from scipy.integrate import quad
from matplotlib import widgets
import apprentice as app

import matplotlib.pyplot as plt
import numpy as np

parser = argparse.ArgumentParser()

#Ex: python3 ../../../../data_scripts/graph_surrogates_and_target.py myweights.txt ../../data.json val_30.json err_20.json 2_exp
# running from a folder in tunes

# mandatory arguments
# These have to come from bash, if not appset throws error about utf-8 encoding. Go figure
parser.add_argument("weightFile", help="weights file generated by by app-ls")
parser.add_argument("dataFile", help="data file generated by app-datadirtojson")
parser.add_argument("valFile", help="val fit file generated by app-build")
parser.add_argument("errorFile", help="error fit file generated by app-build")
parser.add_argument("experimentName", help="Ex: 2_exp or 2_gauss, determines which target params to give to surrogate", type=str)

parser.add_argument("--outputFolder", help="output folder", default = "../../results/important_graphs/tune_validations/")
args = parser.parse_args()
vals = importlib.import_module(args.experimentName)

GOF1 = app.appset.TuningObjective3(args.weightFile, args.dataFile, args.valFile)
# using defaults from appset.minimize called by app-tune2
res = GOF1.minimize(1, 1, method="tnc", tol=1e-6, saddlePointCheck=True)
print(GOF1.printParams(res.x))
no_err = GOF1._AS.vals(res.x)

GOF2 = app.appset.TuningObjective3(args.weightFile, args.dataFile, args.valFile, f_errors=args.errorFile)
res = GOF2.minimize(1, 1, method="tnc", tol=1e-6, saddlePointCheck=True)
print(GOF2.printParams(res.x))
w_err = GOF2._AS.vals(res.x)

GOF3 = app.appset.TuningObjective3(args.weightFile, args.dataFile, args.valFile, compute_cov=True)
res = GOF3.minimize(1, 1, method="tnc", tol=1e-6, saddlePointCheck=True)
print(GOF3.printParams(res.x))
w_cov = GOF3._AS.vals(res.x)

#place marks where to start reading in bin weights for the observable being read
place = 0
#obs: which observable we are processing
for obs in range(vals.nparams):
    bin_width = (vals.x_max[obs]-vals.x_min[obs])/vals.nbins[obs]
    fake_points = np.linspace(vals.x_min[obs]+bin_width/2, vals.x_max[obs]-bin_width/2, vals.nbins[obs])
    
    for label, surrogate_values, linestyle in [('tune_no_err',no_err,'--'),('tune_w_err',w_err,'-.'),('tune_w_cov',w_cov,'-')]:      
        raw_surrogate_weights = surrogate_values[place:place+vals.nbins[obs]]

        # Apparently weights can output Nones >:(
        # If the program breaks, this is a great place to look.
        surrogate_weights = np.empty(vals.nbins[obs])
        for j in range(vals.nbins[obs]):
            if j >= len(raw_surrogate_weights) or raw_surrogate_weights[j] is None:
                surrogate_weights[j] = 0
            else:
                surrogate_weights[j] = raw_surrogate_weights[j]
        # print(str(raw_surrogate_weights))
        # print(str(surrogate_weights) + " len: " + str(len(surrogate_weights)))
        
        plt.hist(fake_points, bins=vals.nbins[obs], range=[vals.x_min[obs], vals.x_max[obs]], linestyle = linestyle,
            histtype='step', alpha = 0.5, weights=surrogate_weights, label="MC " + label)
    place += vals.nbins[obs]

    def target_func(x):
        return vals.funcs[obs](x, vals.targets)
    scale_factor = vals.num_events(vals.targets)/(quad(target_func, vals.x_min[obs], vals.x_max[obs])[0])
    # # Plot target histogram
    # target_weights = [scale_factor * quad(target_func, x-bin_width/2, x+bin_width/2)[0] for x in fake_points]
    # plt.hist(fake_points, bins=vals.nbins[obs], range=[vals.x_min[obs], vals.x_max[obs]], histtype='step',
    # weights=target_weights, label='Data')
    x = np.linspace(vals.x_min[obs], vals.x_max[obs], 200)
    y = target_func(x)*scale_factor
    plt.plot(x,y,label = 'target')
    tune_folder = os.getcwd().split('/')[-1]
    plt.title(args.experimentName + ': obs'+str(obs)+ ' (from '+tune_folder+')')
    plt.xlabel("x")
    plt.ylabel("Number of Events")
    plt.legend()
    if args.experimentName == '2_gauss_v2':
        plt.legend(loc = 'lower right')
    
    plt.savefig(args.outputFolder+args.experimentName+'_obs'+str(obs) + "_"+tune_folder+"_validation" + ".pdf", format="pdf")
    plt.close() 


