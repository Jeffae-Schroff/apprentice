import argparse
import json
import os
import shutil
import importlib

import matplotlib.pyplot as plt
import numpy as np


parser = argparse.ArgumentParser()
# mandatory arguments
parser.add_argument("targetFile", help="data file generated by app-datadirtojson", type=str)
parser.add_argument("valFile", help="val file generated by app-build", type=str)
parser.add_argument("experimentName", help="Ex: 2_exp or 2_gauss, determines which target params to give to surrogate", type=str)

args = parser.parse_args()

vals = importlib.import_module('set_values_' + args.experimentName)
all_val = json.load(open(args.valFile))
all_target = json.load(open(args.targetFile))

# print(all_val.keys())
# print(all_target.keys())

current_obs = (list(all_target.keys())[0]).split('#')[0]
obs_names = [current_obs]
for bin_name in all_target.keys():
    current_str = bin_name.split('#')[0]
    if current_str != current_obs:
        current_obs = current_str
        obs_names.append(current_obs)

# dict mapping observable names to the histograms of their tuned surrogate functions
value_histos = {}
for obs in obs_names:
    value_histos[obs] = []

a = vals.targets[0]
b = vals.targets[1]

for bin in all_val.keys():
    if bin.split('#')[0] in obs_names:
        coeff = all_val[bin]['pcoeff']
        total = 0
        total += coeff[0]
        total += coeff[1]*(a**1)*(b**0) + coeff[2]*(a**0)*(b**1)
        total += coeff[3]*(a**2)*(b**0) + coeff[4]*(a**1)*(b**1) + coeff[5]*(a**0)*(b**2)
        total += coeff[6]*(a**3)*(b**0) + coeff[7]*(a**2)*(b**1) + coeff[8]*(a**1)*(b**2) + coeff[9]*(a**0)*(b**3)
        value_histos[bin.split('#')[0]].append(total)

# dict mapping observable names to the histograms of their target
target_histos = {}
for obs in obs_names:
    target_histos[obs] = []

for bin in all_target.keys():
    target_histos[bin.split('#')[0]].append(all_target[bin][0])


if(os.path.isdir('surrogate_target_graphs')):
    shutil.rmtree('surrogate_target_graphs') 
os.mkdir('surrogate_target_graphs/')


#x values in middle of bins
fake_points = []
fake_points.append((np.array(all_val['__xmin'][0:5]) + np.array(all_val['__xmax'][0:5]))/2)
fake_points.append((np.array(all_val['__xmin'][5:15]) + np.array(all_val['__xmax'][5:15]))/2)
for i in range(len(obs_names)):
    obs_name = obs_names[i]
    print(fake_points[i])
    print(target_histos[obs])
    plt.hist(fake_points[i], bins=vals.nbins[i], range=[all_val['__xmin'][0], all_val['__xmax'][4]], histtype='step',
    weights=target_histos[obs], label='target')
    plt.hist(fake_points[i], bins=vals.nbins[i], range=[all_val['__xmin'][0], all_val['__xmax'][4]], histtype='step',
    weights=value_histos[obs], label='surrogate')

    plt.title(args.experimentName + ' observable function: ' + obs)
    plt.xlabel("x")
    plt.ylabel("Number of Events")
    plt.legend()
    plt.savefig("surrogate_target_graphs"+obs_name + ".pdf", format="pdf")
    plt.close()  