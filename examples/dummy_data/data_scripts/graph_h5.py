#Generates pdfs of data from an h5 file made with app-yoda2h5, saved to an h5_graphs folder in the working directory
#later the experimentName argument could be made optional

import os
import shutil
import h5py
import numpy as np
import argparse
import matplotlib.pyplot as plt
import importlib
from scipy.integrate import quad
 
parser = argparse.ArgumentParser()

# mandatory arguments
parser.add_argument("experimentName", help="Ex: 2_exp or 2_gauss, determines which set_values to use for nominal", type=str)
parser.add_argument("filepath", help=".h5 file generated by app-yoda2h5", type=str)
# add optional output where argument ??

# Parse arguments
args = parser.parse_args()

f = h5py.File(args.filepath, "r+")

vals = importlib.import_module("set_values_" + args.experimentName)

# print(f.keys())
# for i in f.keys():
#     print(i)
#     print(f[i][0])

# values is array of dim [#obs*obs_bins, number of MC folders]
total_bins = np.shape(f['values'])[0]
num_runs = np.shape(f['values'])[1]
# index is array of dim [#obs*obs_bins]:
# assumes no '#' char in obs name
current_obs = (f['index'][0].decode("utf-8")).split('#')[0]
obs_names = [current_obs]
for index in f['index']:
    current_str = index.decode("utf-8").split('#')[0]
    if current_str != current_obs:
        current_obs = current_str
        obs_names.append(current_obs)

obs_bins = 0
for index in f['index']:
    if index.decode("utf-8").split('#')[0] == obs_names[0]:
        obs_bins += 1

def main():
    for obs_num in range(len(obs_names)):
        for run_num in range(num_runs):
            if(os.path.isdir('h5_graphs')):
                shutil.rmtree('h5_graphs') 
            os.mkdir('h5_graphs/')

            plot_reweighted(obs_num, run_num)
            
            plt.xlabel("x")
            plt.ylabel("Number of Events")
            plt.legend()
            plt.savefig("h5_graphs/"+obs_names[obs_num] + "_" + str(run_num) + ".pdf", format="pdf")

    f.close()

#-----------------------------------------------plots actual data stored in h5 file-----------------------------------------
#obs_num, run_num start at 0
def plot_reweighted(obs_num, run_num):
    #the range of indexes that match our obs_num, [o_min, o_max)
    o_min = obs_num*obs_bins
    o_max = (obs_num + 1)*obs_bins

    fake_points = (f['xmax'][o_min:o_max] + f['xmin'][o_min:o_max])/2 
    #insert points with x in middle of bins, weighted to value of bin in h5 file
    plt.hist(fake_points, bins=obs_bins, range=[f['xmin'][o_min], f['xmax'][o_max-1]], histtype='step',
            weights=f['values'][o_min:o_max, run_num], alpha = 0.5, label='reweighted')

#-------------------plots nominal data using param values from file plugged into obs func from experiment name=-------------

# fake_points = (f['xmax'][:] + f['xmin'][:])/2 
# #insert points with x in middle of bins, weighted average value of value of function in bin range
# plt.hist(fake_points, bins=obs_bins, range=[f['xmin'][0], f['xmax'][-1]], histtype='step',
#           weights=f['values'][:,0], alpha = 0.5, label='reweighted')



if __name__ == '__main__':
    main()
